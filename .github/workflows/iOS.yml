name: Build IPA

on:
  push:
    branches: [ "iOS" ]
  pull_request:
    branches: [ "iOS" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Print Xcode Version and List Installations
        run: |
          echo "Using Xcode version:"
          xcodebuild -version
          echo "Listing available Xcode installations:"
          ls /Applications | grep Xcode

      - name: Diagnostic â€“ List Schemes
        run: |
          echo "Attempting to list schemes from the project..."
          xcodebuild -list -json || echo "Failed to list schemes. Your project file format may be newer than the runner's Xcode version."

      - name: Set Default Scheme
        id: set_scheme
        run: |
          # Attempt to capture the list of schemes.
          # This will fail if the project file format is incompatible.
          scheme_list=$(xcodebuild -list -json 2>/dev/null | tr -d "\n")
          if [ -z "$scheme_list" ]; then
            echo "Error: Unable to retrieve schemes. Ensure your project file format is compatible with the runner's Xcode."
            exit 1
          fi
          # Parse the first available scheme from the JSON output.
          default=$(echo "$scheme_list" | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['schemes'][0]")
          echo "default=${default}" >> $GITHUB_ENV
          echo "Using default scheme: ${default}"

      - name: Build
        env:
          scheme: ${{ env.default }}
        run: |
          # Clean and archive the project for a generic iOS device.
          xcodebuild clean archive \
            -scheme "$scheme" \
            -configuration Release \
            -archivePath "$PWD/build/${scheme}.xcarchive" \
            -sdk iphoneos \
            -allowProvisioningUpdates \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO

          # Package the built app into an IPA.
          mkdir Payload
          # IMPORTANT: Adjust "Countdown.app" to match your actual product name.
          cp -r build/${scheme}.xcarchive/Products/Applications/Countdown.app Payload/
          zip -r "${scheme}.ipa" Payload
          rm -rf Payload

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.default }}.ipa"
          path: "${{ env.default }}.ipa"
          retention-days: 90
